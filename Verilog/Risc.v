// Module generated by Chisel of Risc.scala
// https://github.com/robccharles/VHDL/blob/Chisel/Chisel/Risc.scala
module Risc(input clk, input reset,
    input  io_isWr,
    input [7:0] io_wrAddr,
    input [8:0] io_wrData,
    input  io_boot,
    output io_valid,
    output[1:0] io_out
);

  wire[1:0] T0;
  wire[1:0] rc;
  wire[1:0] T47;
  wire[3:0] T1;
  wire[3:0] T2;
  wire[3:0] T3;
  wire[3:0] T4;
  wire[3:0] T48;
  wire[1:0] T5;
  wire[1:0] T6;
  wire[1:0] rb;
  wire[1:0] T7;
  reg [1:0] file [255:0];
  wire[1:0] T8;
  wire T9;
  wire T10;
  wire T11;
  wire[1:0] rci;
  wire[8:0] inst;
  reg [8:0] code [255:0];
  wire[8:0] T12;
  reg [7:0] pc;
  wire[7:0] T49;
  wire[7:0] T13;
  wire[7:0] T14;
  wire[7:0] T15;
  wire T16;
  wire T17;
  wire[7:0] T18;
  wire[7:0] T50;
  wire[3:0] T19;
  wire[3:0] T51;
  wire[1:0] rbi;
  wire[3:0] T20;
  wire[1:0] rai;
  wire T21;
  wire T22;
  wire[2:0] op;
  wire[7:0] T23;
  wire T24;
  wire T25;
  wire[7:0] T52;
  wire[7:0] T53;
  wire T26;
  wire[1:0] ra;
  wire[1:0] T27;
  wire[7:0] T54;
  wire T28;
  wire T29;
  wire T30;
  wire[3:0] T31;
  wire[3:0] T55;
  wire[3:0] T32;
  wire T33;
  wire T34;
  wire[3:0] T56;
  wire[1:0] T35;
  wire T36;
  wire T37;
  wire[3:0] T57;
  wire[1:0] T38;
  wire T39;
  wire T40;
  wire[3:0] T58;
  wire[1:0] T41;
  wire T42;
  wire T43;
  wire T44;
  wire T45;
  wire T46;

`ifndef SYNTHESIS
// synthesis translate_off
  integer initvar;
  initial begin
    #0.002;
    for (initvar = 0; initvar < 256; initvar = initvar+1)
      file[initvar] = {1{$random}};
    for (initvar = 0; initvar < 256; initvar = initvar+1)
      code[initvar] = {1{$random}};
    pc = {1{$random}};
  end
// synthesis translate_on
`endif

  assign io_out = T0;
  assign T0 = T44 ? rc : 2'h0;
  assign rc = T47;
  assign T47 = T1[1:0];
  assign T1 = T42 ? T58 : T2;
  assign T2 = T39 ? T57 : T3;
  assign T3 = T36 ? T56 : T4;
  assign T4 = T33 ? T31 : T48;
  assign T48 = {2'h0, T5};
  assign T5 = T29 ? T6 : 2'h0;
  assign T6 = ra + rb;
  assign rb = T26 ? 2'h0 : T7;
  assign T7 = file[T53];
  assign T9 = T44 & T10;
  assign T10 = T11 ^ 1'h1;
  assign T11 = rci == 2'h3;
  assign rci = inst[5:4];
  assign inst = code[pc];
  assign T49 = reset ? 8'h0 : T13;
  assign T13 = T24 ? T23 : T14;
  assign T14 = T21 ? T18 : T15;
  assign T15 = T16 ? 8'h0 : pc;
  assign T16 = T17 & io_boot;
  assign T17 = io_isWr ^ 1'h1;
  assign T18 = pc + T50;
  assign T50 = {4'h0, T19};
  assign T19 = T20 | T51;
  assign T51 = {2'h0, rbi};
  assign rbi = inst[1:0];
  assign T20 = rai << 2'h2;
  assign rai = inst[3:2];
  assign T21 = T44 & T22;
  assign T22 = op == 3'h4;
  assign op = inst[8:6];
  assign T23 = pc + 8'h1;
  assign T24 = T44 & T25;
  assign T25 = T22 ^ 1'h1;
  assign T52 = {6'h0, rci};
  assign T53 = {6'h0, rbi};
  assign T26 = rbi == 2'h0;
  assign ra = T28 ? 2'h0 : T27;
  assign T27 = file[T54];
  assign T54 = {6'h0, rai};
  assign T28 = rai == 2'h0;
  assign T29 = T44 & T30;
  assign T30 = 3'h0 == op;
  assign T31 = T32 | T55;
  assign T55 = {2'h0, rbi};
  assign T32 = rai << 2'h2;
  assign T33 = T44 & T34;
  assign T34 = 3'h1 == op;
  assign T56 = {2'h0, T35};
  assign T35 = ra | rb;
  assign T36 = T44 & T37;
  assign T37 = 3'h2 == op;
  assign T57 = {2'h0, T38};
  assign T38 = ra ^ rb;
  assign T39 = T44 & T40;
  assign T40 = 3'h3 == op;
  assign T58 = {2'h0, T41};
  assign T41 = ra & rb;
  assign T42 = T44 & T43;
  assign T43 = 3'h5 == op;
  assign T44 = T45 ^ 1'h1;
  assign T45 = io_isWr | io_boot;
  assign io_valid = T46;
  assign T46 = T44 & T11;

  always @(posedge clk) begin
    if (T9)
      file[T52] <= rc;
    if (io_isWr)
      code[io_wrAddr] <= io_wrData;
    if(reset) begin
      pc <= 8'h0;
    end else if(T24) begin
      pc <= T23;
    end else if(T21) begin
      pc <= T18;
    end else if(T16) begin
      pc <= 8'h0;
    end
  end
endmodule

